// Versi√≥n del juego
const VERSION = '1.2.0';

// Registro de cambios (changelog)
const CHANGELOG = {
    '1.2.0': [
        'A√±adido easter egg secreto... ¬øenserio pensabas que iba a ser tan facil?',
        'Mejorado sistema de logros',
        'A√±adidos nuevos logros secretos',
        'Mejorada la visualizaci√≥n de logros con efectos especiales',
        'A√±adido sistema de notificaciones mejorado',
        'Corregidos bugs menores'
    ],
    '1.1.0': [
        'A√±adido sistema de prestigio',
        'A√±adidos chips celestiales',
        'A√±adido multiplicador celestial',
        'A√±adido men√∫ de legado',
        'Mejorado sistema de guardado'
    ],
    '1.0.0': [
        'Versi√≥n inicial del juego',
        'Sistema b√°sico de clicks',
        'Sistema de edificios',
        'Sistema de mejoras',
        'Sistema de logros b√°sico',
        'Sistema de guardado b√°sico'
    ]
};

// Variables del juego
let cookies = 0;
let cookiesPerSecond = 0;
let cookiesPerClick = 1;
let multiplier = 1;
let bakeryName = "La confiter√≠a de aleko";
let buyMultiplier = 1;
let heavenlyChips = 0;
let heavenlyMultiplier = 1;

// Variables para los nuevos logros
let clickCounter = 0;
let lastClickTime = 0;
let clicksWithoutBuying = 0;
let konamiCode = '';
let goldenCookieClicks = 0;

// Funciones para editar el nombre de la confiter√≠a
function showNameEditor() {
    const nameInput = document.getElementById('name-input');
    const editContainer = document.getElementById('edit-name-container');
    const playerNameElement = document.getElementById('player-name');
    
    if (!nameInput || !editContainer || !playerNameElement) {
        showNotification('Error al editar el nombre: elementos no encontrados', 'error');
        console.error('Elementos necesarios para editar el nombre no encontrados:', {
            nameInput: !!nameInput,
            editContainer: !!editContainer,
            playerNameElement: !!playerNameElement
        });
        return;
    }
    
    nameInput.value = playerNameElement.textContent || 'aleko';
    editContainer.classList.remove('hidden');
}

function hideNameEditor() {
    const editContainer = document.getElementById('edit-name-container');
    if (!editContainer) {
        showNotification('Error al ocultar el editor: elemento no encontrado', 'error');
        console.error('Contenedor de edici√≥n no encontrado');
        return;
    }
    editContainer.classList.add('hidden');
}

function saveBakeryName() {
    const nameInput = document.getElementById('name-input');
    const playerNameElement = document.getElementById('player-name');
    
    if (!nameInput || !playerNameElement) {
        showNotification('Error al guardar el nombre: elementos no encontrados', 'error');
        console.error('Elementos necesarios para guardar el nombre no encontrados:', {
            nameInput: !!nameInput,
            playerNameElement: !!playerNameElement
        });
        return;
    }
    
    const newName = nameInput.value.trim();
    if (newName) {
        playerNameElement.textContent = newName;
        bakeryName = "La confiter√≠a de " + newName;
        saveGame();
        showNotification('¬°Nombre guardado!', 'success');
        hideNameEditor();
    } else {
        showNotification('El nombre no puede estar vac√≠o', 'error');
    }
}

// Inicializaci√≥n de los event listeners para la edici√≥n del nombre
function initNameEditorListeners() {
    const editNameBtn = document.getElementById('edit-name-btn');
    const saveNameBtn = document.getElementById('save-name-btn');
    const cancelNameBtn = document.getElementById('cancel-name-btn');
    const nameInput = document.getElementById('name-input');
    
    if (!editNameBtn || !saveNameBtn || !cancelNameBtn || !nameInput) {
        showNotification('Error al inicializar los botones de edici√≥n', 'error');
        console.error('No se pudieron encontrar todos los elementos necesarios para la edici√≥n del nombre:', {
            editNameBtn: !!editNameBtn,
            saveNameBtn: !!saveNameBtn,
            cancelNameBtn: !!cancelNameBtn,
            nameInput: !!nameInput
        });
        return;
    }
    
    editNameBtn.addEventListener('click', showNameEditor);
    saveNameBtn.addEventListener('click', saveBakeryName);
    cancelNameBtn.addEventListener('click', hideNameEditor);
    
    nameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            saveBakeryName();
        }
    });
}

// Asegurarse de que los event listeners se inicialicen despu√©s de que el DOM est√© cargado
document.addEventListener('DOMContentLoaded', function() {
    initNameEditorListeners();
});

// Variables para Golden Cookies
let goldenCookieTimer = null;
let activeEffects = [];
let goldenCookieClickCount = 0;

// Funci√≥n para generar Golden Cookie manualmente (accesible desde la consola)
window.spawnGoldenCookieManual = () => {
    // Cancelar el temporizador existente si hay uno
    if (goldenCookieTimer) {
        clearTimeout(goldenCookieTimer);
    }
    
    // Eliminar cualquier Golden Cookie existente
    const existingGoldenCookies = document.querySelectorAll('.golden-cookie');
    existingGoldenCookies.forEach(cookie => cookie.remove());
    
    // Generar nueva Golden Cookie
    spawnGoldenCookie();
    
    // Reiniciar el sistema de spawn autom√°tico
    startGoldenCookieSystem();
    
    console.log('¬°Golden Cookie generada manualmente! üç™‚ú®');
};

// Efectos de Golden Cookies
const goldenCookieEffects = {
    positive: [
        {
            name: "¬°Frenes√≠!",
            description: "¬°Producci√≥n x7 durante 77 segundos!",
            duration: 77,
            effect: () => {
                multiplier *= 7;
                updateCPS();
            },
            end: () => {
                multiplier /= 7;
                updateCPS();
            }
        },
        {
            name: "¬°Lluvia de Galletas!",
            description: "¬°+15 minutos de producci√≥n!",
            duration: 0,
            effect: () => {
                cookies += cookiesPerSecond * 900;
                updateDisplay();
            }
        },
        {
            name: "¬°Click Afortunado!",
            description: "¬°+10% de tus galletas totales!",
            duration: 0,
            effect: () => {
                cookies += cookies * 0.1;
                updateDisplay();
            }
        }
    ],
    negative: [
        {
            name: "¬°Recesi√≥n!",
            description: "Producci√≥n reducida a la mitad durante 66 segundos",
            duration: 66,
            effect: () => {
                multiplier *= 0.5;
                updateCPS();
            },
            end: () => {
                multiplier *= 2;
                updateCPS();
            }
        },
        {
            name: "¬°Robo de Galletas!",
            description: "¬°Pierdes el 5% de tus galletas!",
            duration: 0,
            effect: () => {
                cookies *= 0.95;
                updateDisplay();
            }
        },
        {
            name: "¬°Clicks D√©biles!",
            description: "Clicks reducidos a la mitad durante 45 segundos",
            duration: 45,
            effect: () => {
                cookiesPerClick *= 0.5;
                updateDisplay();
            },
            end: () => {
                cookiesPerClick *= 2;
                updateDisplay();
            }
        }
    ]
};

// Funci√≥n para crear una Golden Cookie
function spawnGoldenCookie() {
    const goldenCookie = document.createElement('div');
    goldenCookie.className = 'golden-cookie';
    goldenCookie.innerHTML = 'üç™';
    
    // Posici√≥n aleatoria en la pantalla
    const maxX = window.innerWidth - 60;
    const maxY = window.innerHeight - 60;
    const randomX = Math.floor(Math.random() * maxX);
    const randomY = Math.floor(Math.random() * maxY);
    
    goldenCookie.style.left = randomX + 'px';
    goldenCookie.style.top = randomY + 'px';
    
    // Desaparece despu√©s de 13 segundos
    const disappearTimeout = setTimeout(() => {
        goldenCookie.remove();
    }, 13000);
    
    goldenCookie.onclick = () => {
        goldenCookieClickCount++;
        clearTimeout(disappearTimeout);
        activateGoldenCookieEffect(goldenCookie);
        goldenCookie.remove();
    };
    
    document.body.appendChild(goldenCookie);
}

// Funci√≥n para activar un efecto aleatorio
function activateGoldenCookieEffect(cookie) {
    // 70% de probabilidad de efecto positivo, 30% negativo
    const isPositive = Math.random() < 0.7;
    const effects = isPositive ? goldenCookieEffects.positive : goldenCookieEffects.negative;
    const effect = effects[Math.floor(Math.random() * effects.length)];
    
    // Activar el efecto
    effect.effect();
    showNotification(`${effect.name} - ${effect.description}`, isPositive ? 'success' : 'warning');
    
    // Si el efecto tiene duraci√≥n, programar su finalizaci√≥n
    if (effect.duration > 0) {
        const effectTimer = {
            name: effect.name,
            timeLeft: effect.duration,
            endEffect: effect.end
        };
        
        activeEffects.push(effectTimer);
        
        // Actualizar el contador de tiempo restante
        const timerInterval = setInterval(() => {
            effectTimer.timeLeft--;
            if (effectTimer.timeLeft <= 0) {
                clearInterval(timerInterval);
                effectTimer.endEffect();
                activeEffects = activeEffects.filter(e => e !== effectTimer);
                updateEffectsDisplay();
            }
            updateEffectsDisplay();
        }, 1000);
    }
    
    updateEffectsDisplay();
}

// Funci√≥n para actualizar la visualizaci√≥n de efectos activos
function updateEffectsDisplay() {
    const effectsContainer = document.getElementById('active-effects');
    if (!effectsContainer) return;
    
    effectsContainer.innerHTML = '';
    activeEffects.forEach(effect => {
        const effectElement = document.createElement('div');
        effectElement.className = 'active-effect';
        effectElement.textContent = `${effect.name} (${effect.timeLeft}s)`;
        effectsContainer.appendChild(effectElement);
    });
}

// Iniciar el sistema de Golden Cookies
function startGoldenCookieSystem() {
    // Aparece cada 5-15 minutos
    const spawnInterval = () => {
        const minTime = 5 * 60 * 1000;  // 5 minutos
        const maxTime = 15 * 60 * 1000; // 15 minutos
        return Math.random() * (maxTime - minTime) + minTime;
    };
    
    const scheduleNextSpawn = () => {
        goldenCookieTimer = setTimeout(() => {
            spawnGoldenCookie();
            scheduleNextSpawn();
        }, spawnInterval());
    };
    
    scheduleNextSpawn();
}

// Iniciar el sistema cuando se carga el juego
window.addEventListener('load', () => {
    startGoldenCookieSystem();
});

// Variables de estad√≠sticas
let gameStats = {
    totalCookies: 0,
    totalClicks: 0,
    startDate: new Date().toISOString(),
    playTime: 0,
    ascensions: 0,
    totalHeavenlyChips: 0,
    goldenCookieClicks: 0
};

// Array de noticias
const newsMessages = [
    "Un nuevo estudio afirma que las galletas no retrasan el envejecimiento, sino que 'te llevan en otra direcci√≥n'",
    "Abuela local rompe r√©cord mundial al hornear 1000 galletas en una hora",
    "Cient√≠ficos descubren que las galletas son un 100% m√°s deliciosas cuando son gratis",
    "¬°Esc√°ndalo! Se descubre que algunas galletas de chocolate no contienen chocolate real",
    "Nueva dieta revolucionaria: '¬°Solo galletas!' (Resultados no garantizados)",
    "Estudio revela que mirar galletas aumenta la felicidad un 73%",
    "Arque√≥logos encuentran galleta de hace 1000 a√±os, a√∫n crujiente",
    "Expertos advierten: 'Las galletas pueden ser adictivas, ¬°y eso es genial!'",
    "Panadero confundido hace galletas cuadradas, revoluciona la industria",
    "Gatos locales protestan por la falta de galletas con sabor a pescado",
    "Se descubre que las galletas son un 100% m√°s deliciosas cuando son gratis",
    "Esto es un clon, no es el juego original, el original es Cookie Clicker",
    "El creador de este juego es un programador, no un dise√±ador de videojuegos",
    "He creado este clon en una hora, no esperen m√°s, no es el original",
    "¬øQue hago con mi vida?",
    "¬øQu√© es un cursor?",
    "¬øQu√© es una abuela?",
    "¬øQu√© es una granja?",
    "¬øQu√© es una mina?",
    "¬øQu√© es una f√°brica?",
    "¬øQu√© es un banco?",
    "Apartir de ahora, no me llamo Alejandro, me llamo Cookie Clicker",
    
];

// Precios y cantidades de mejoras
const upgrades = {
    cursor: {
        count: 0,
        baseCost: 15,
        cps: 0.1,
        unlockAt: 0
    },
    grandma: {
        count: 0,
        baseCost: 100,
        cps: 1,
        unlockAt: 50
    },
    farm: {
        count: 0,
        baseCost: 1100,
        cps: 8,
        unlockAt: 500
    },
    mine: {
        count: 0,
        baseCost: 12000,
        cps: 47,
        unlockAt: 5000
    },
    factory: {
        count: 0,
        baseCost: 130000,
        cps: 260,
        unlockAt: 50000
    },
    bank: {
        count: 0,
        baseCost: 1400000,
        cps: 1400,
        unlockAt: 500000
    },
    temple: {
        count: 0,
        baseCost: 20000000,
        cps: 7800,
        unlockAt: 1000000
    },
    wizard: {
        count: 0,
        baseCost: 330000000,
        cps: 44000,
        unlockAt: 10000000
    },
    shipment: {
        count: 0,
        baseCost: 5100000000,
        cps: 260000,
        unlockAt: 10000000
    },
    alchemy: {
        count: 0,
        baseCost: 75000000000,
        cps: 1600000,
        unlockAt: 50000000
    },
    portal: {
        count: 0,
        baseCost: 1000000000000,
        cps: 10000000,
        unlockAt: 100000000
    },
    timeMachine: {
        count: 0,
        baseCost: 14000000000000,
        cps: 65000000,
        unlockAt: 500000000
    },
    antimatter: {
        count: 0,
        baseCost: 170000000000000,
        cps: 430000000,
        unlockAt: 1000000000
    },
    prism: {
        count: 0,
        baseCost: 2100000000000000,
        cps: 2900000000,
        unlockAt: 5000000000
    },
    engine: {
        count: 0,
        baseCost: 26000000000000000,
        cps: 21000000000,
        unlockAt: 10000000000
    },
    fractal: {
        count: 0,
        baseCost: 310000000000000000,
        cps: 150000000000,
        unlockAt: 50000000000
    }
};

// Sistema de logros
const achievements = {
    beginner: {
        name: "¬°Principiante!",
        description: "Consigue tu primera galleta",
        icon: "üéØ",
        requirement: () => cookies >= 1,
        unlocked: false
    },
    amateur: {
        name: "Amateur",
        description: "Consigue 100 galletas",
        icon: "üéÆ",
        requirement: () => cookies >= 100,
        unlocked: false
    },
    professional: {
        name: "Profesional",
        description: "Consigue 1,000 galletas",
        icon: "üèÜ",
        requirement: () => cookies >= 1000,
        unlocked: false
    },
    master: {
        name: "Maestro",
        description: "Consigue 10,000 galletas",
        icon: "üëë",
        requirement: () => cookies >= 10000,
        unlocked: false
    },
    // Logros de cursores

    firstCursor: {
        name: "Cookie Clicker",
        description: "Consigue tu primer cursor, (el cursor es el edificio mas importante del juego",
        icon: "üñ±Ô∏è",
        requirement: () => upgrades.cursor.count >= 1,
        unlocked: false
    },
    cursor50: {
        name: "Ej√©rcito de Cursores",
        description: "Posee 50 cursores",
        icon: "üñ±Ô∏è",
        requirement: () => upgrades.cursor.count >= 50,
        unlocked: false
    },
    cursor100: {
        name: "Legi√≥n de Cursores",
        description: "Posee 100 cursores",
        icon: "üñ±Ô∏è",
        requirement: () => upgrades.cursor.count >= 100,
        unlocked: false
    },
    // Logros de abuelitas
    firstGrandma: {
        name: "¬øTienes hambre?",
        description: "Consigue tu primera abuela",
        icon: "üëµ",
        requirement: () => upgrades.grandma.count >= 1,
        unlocked: false
    },
    grandma50: {
        name: "Reuni√≥n Familiar",
        description: "Posee 50 abuelitas",
        icon: "üëµ",
        requirement: () => upgrades.grandma.count >= 50,
        unlocked: false
    },
    grandma100: {
        name: "Convenci√≥n de Abuelitas",
        description: "Posee 100 abuelitas",
        icon: "üëµ",
        requirement: () => upgrades.grandma.count >= 100,
        unlocked: false
    },
    // Logros de granjas
    firstFarm: {
        name: "¬øSe pueden plantar galletas?",
        description: "Consigue tu primera granja",
        icon: "üåæ",
        requirement: () => upgrades.farm.count >= 1,
        unlocked: false
    },
    farm50: {
        name: "Terrateniente",
        description: "Posee 50 granjas",
        icon: "üåæ",
        requirement: () => upgrades.farm.count >= 50,
        unlocked: false
    },
    farm100: {
        name: "Imperio Agr√≠cola",
        description: "Posee 100 granjas",
        icon: "üåæ",
        requirement: () => upgrades.farm.count >= 100,
        unlocked: false
    },
    // Logros de minas
    firstMine: {
        name: "Mine... mejor no digas que es una mina, no se ni yo que es...",
        description: "Consigue tu primera mina",
        icon: "‚õèÔ∏è",
        requirement: () => upgrades.mine.count >= 1,
        unlocked: false
    },
    mine50: {
        name: "Excavador Experto",
        description: "Posee 50 minas",
        icon: "‚õèÔ∏è",
        requirement: () => upgrades.mine.count >= 50,
        unlocked: false
    },
    mine100: {
        name: "Rey Minas (¬øentendiste la broma? ¬øNo? Oh...)",
        description: "Posee 100 minas",
        icon: "‚õèÔ∏è",
        requirement: () => upgrades.mine.count >= 100,
        unlocked: false
    },
    // Logros de f√°bricas
    firstFactory: {
        name: "Aut√≥nomo",
        description: "Consigue tu primera f√°brica",
        icon: "üè≠",
        requirement: () => upgrades.factory.count >= 1,
        unlocked: false
    },
    factory50: {
        name: "Magnate Industrial",
        description: "Posee 50 f√°bricas",
        icon: "üè≠",
        requirement: () => upgrades.factory.count >= 50,
        unlocked: false
    },
    factory100: {
        name: "Revoluci√≥n Industrial",
        description: "Posee 100 f√°bricas",
        icon: "üè≠",
        requirement: () => upgrades.factory.count >= 100,
        unlocked: false
    },
    // Logros de bancos
    firstBank: {
        name: "Pr√©stamo",
        description: "Consigue tu primer banco",
        icon: "üè¶",
        requirement: () => upgrades.bank.count >= 1,
        unlocked: false
    },
    bank50: {
        name: "Banquero Maestro",
        description: "Posee 50 bancos",
        icon: "üè¶",
        requirement: () => upgrades.bank.count >= 50,
        unlocked: false
    },
    bank100: {
        name: "Imperio Financiero",
        description: "Posee 100 bancos",
        icon: "üè¶",
        requirement: () => upgrades.bank.count >= 100,
        unlocked: false
    },
    // Logros de templos
    firstTemple: {
        name: "¬øTengo que leer la biblia?",
        description: "Consigue tu primer templo",
        icon: "üèõÔ∏è",
        requirement: () => upgrades.temple.count >= 1,
        unlocked: false
    },
    temple50: {
        name: "Sumo Sacerdote",
        description: "Posee 50 templos",
        icon: "üèõÔ∏è",
        requirement: () => upgrades.temple.count >= 50,
        unlocked: false
    },
    temple100: {
        name: "Pante√≥n Divino",
        description: "Posee 100 templos",
        icon: "üèõÔ∏è",
        requirement: () => upgrades.temple.count >= 100,
        unlocked: false
    },
    // Logros de torres de magos
    firstWizard: {
        name: "!Hogwarts!",
        description: "Consigue tu primer torre de magos",
        icon: "üßô‚Äç‚ôÇÔ∏è",
        requirement: () => upgrades.wizard.count >= 1,
        unlocked: false
    },
    wizard50: {
        name: "Archimago",
        description: "Posee 50 torres de magos",
        icon: "üßô‚Äç‚ôÇÔ∏è",
        requirement: () => upgrades.wizard.count >= 50,
        unlocked: false
    },
    wizard100: {
        name: "Consejo de Hechiceros",
        description: "Posee 100 torres de magos",
        icon: "üßô‚Äç‚ôÇÔ∏è",
        requirement: () => upgrades.wizard.count >= 100,
        unlocked: false
    },
    // Logros de nave espacial
    firstShipment: {
        name: "¬°Despegue!",
        description: "Compra tu primera Nave Espacial",
        icon: "üöÄ",
        requirement: () => upgrades.shipment.count >= 1,
        unlocked: false
    },
    shipment50: {
        name: "Flota Gal√°ctica",
        description: "Posee 50 naves espaciales",
        icon: "üöÄ",
        requirement: () => upgrades.shipment.count >= 50,
        unlocked: false
    },
    shipment100: {
        name: "Imperio Intergal√°ctico",
        description: "Posee 100 naves espaciales",
        icon: "üöÄ",
        requirement: () => upgrades.shipment.count >= 100,
        unlocked: false
    },
    // Logros de laboratorio de alquimia
    firstAlchemy: {
        name: "¬°Eureka!",
        description: "Compra tu primer Laboratorio de Alquimia",
        icon: "‚öóÔ∏è",
        requirement: () => upgrades.alchemy.count >= 1,
        unlocked: false
    },
    alchemy50: {
        name: "Piedra Filosofal",
        description: "Posee 50 laboratorios de alquimia",
        icon: "‚öóÔ∏è",
        requirement: () => upgrades.alchemy.count >= 50,
        unlocked: false
    },
    alchemy100: {
        name: "Alquimista Supremo",
        description: "Posee 100 laboratorios de alquimia",
        icon: "‚öóÔ∏è",
        requirement: () => upgrades.alchemy.count >= 100,
        unlocked: false
    },
    // Logros de portal
    firstPortal: {
        name: "¬°Dimensi√≥n Alternativa!",
        description: "Compra tu primer Portal",
        icon: "üåÄ",
        requirement: () => upgrades.portal.count >= 1,
        unlocked: false
    },
    portal50: {
        name: "Red Interdimensional",
        description: "Posee 50 portales",
        icon: "üåÄ",
        requirement: () => upgrades.portal.count >= 50,
        unlocked: false
    },
    portal100: {
        name: "Se√±or del Multiverso",
        description: "Posee 100 portales",
        icon: "üåÄ",
        requirement: () => upgrades.portal.count >= 100,
        unlocked: false
    },
    // Logros de m√°quina del tiempo
    firstTimeMachine: {
        name: "¬°Viaje en el Tiempo!",
        description: "Compra tu primera M√°quina del Tiempo",
        icon: "‚åõ",
        requirement: () => upgrades.timeMachine.count >= 1,
        unlocked: false
    },
    timeMachine50: {
        name: "Paradoja Temporal",
        description: "Posee 50 m√°quinas del tiempo",
        icon: "‚åõ",
        requirement: () => upgrades.timeMachine.count >= 50,
        unlocked: false
    },
    timeMachine100: {
        name: "Amo del Tiempo",
        description: "Posee 100 m√°quinas del tiempo",
        icon: "‚åõ",
        requirement: () => upgrades.timeMachine.count >= 100,
        unlocked: false
    },
    // Logros de condensador antimaterial
    firstAntimatter: {
        name: "¬°Antimateria!",
        description: "Compra tu primer Condensador Antimaterial",
        icon: "‚öõÔ∏è",
        requirement: () => upgrades.antimatter.count >= 1,
        unlocked: false
    },
    antimatter50: {
        name: "Colapso Cu√°ntico",
        description: "Posee 50 condensadores antimateriales",
        icon: "‚öõÔ∏è",
        requirement: () => upgrades.antimatter.count >= 50,
        unlocked: false
    },
    antimatter100: {
        name: "Maestro del Vac√≠o",
        description: "Posee 100 condensadores antimateriales",
        icon: "‚öõÔ∏è",
        requirement: () => upgrades.antimatter.count >= 100,
        unlocked: false
    },
    // Logros de prisma
    firstPrism: {
        name: "¬°Arco√≠ris!",
        description: "Compra tu primer Prisma",
        icon: "üîÆ",
        requirement: () => upgrades.prism.count >= 1,
        unlocked: false
    },
    prism50: {
        name: "Espectro Luminoso",
        description: "Posee 50 prismas",
        icon: "üîÆ",
        requirement: () => upgrades.prism.count >= 50,
        unlocked: false
    },
    prism100: {
        name: "Se√±or del Arco√≠ris",
        description: "Posee 100 prismas",
        icon: "üîÆ",
        requirement: () => upgrades.prism.count >= 100,
        unlocked: false
    },
    // Logros de motor de galletas
    firstEngine: {
        name: "¬°Encendido!",
        description: "Compra tu primer Motor de Galletas",
        icon: "‚öôÔ∏è",
        requirement: () => upgrades.engine.count >= 1,
        unlocked: false
    },
    engine50: {
        name: "Supercargador",
        description: "Posee 50 motores de galletas",
        icon: "‚öôÔ∏è",
        requirement: () => upgrades.engine.count >= 50,
        unlocked: false
    },
    engine100: {
        name: "Ingeniero Supremo",
        description: "Posee 100 motores de galletas",
        icon: "‚öôÔ∏è",
        requirement: () => upgrades.engine.count >= 100,
        unlocked: false
    },
    // Logros de fractal
    firstFractal: {
        name: "¬°Infinito!",
        description: "Compra tu primer Fractal",
        icon: "üåå",
        requirement: () => upgrades.fractal.count >= 1,
        unlocked: false
    },
    fractal50: {
        name: "Recursi√≥n Infinita",
        description: "Posee 50 fractales",
        icon: "üåå",
        requirement: () => upgrades.fractal.count >= 50,
        unlocked: false
    },
    fractal100: {
        name: "Maestro del Caos",
        description: "Posee 100 fractales",
        icon: "üåå",
        requirement: () => upgrades.fractal.count >= 100,
        unlocked: false
    },
    // Logros especiales de clicks
    speedClicker: {
        name: "¬°Dedo Veloz!",
        description: "Haz 15 clicks en menos de 3 segundos",
        icon: "‚ö°",
        requirement: () => false, // Se maneja en el evento click
        unlocked: false
    },
    goldenFinger: {
        name: "Dedo de Oro",
        description: "Haz click en 50 galletas doradas",
        icon: "üåü",
        requirement: () => gameStats.goldenCookieClicks >= 50,
        unlocked: false
    },
    nightOwl: {
        name: "¬°Nocturno!",
        description: "Haz 1000 clicks en menos de 10 minutos",
        icon: "üåô",
        requirement: () => gameStats.totalClicks >= 1000 && gameStats.playTime < 600,
        unlocked: false
    },
    konami: {
        name: "Esto no es un easter egg",
        description: "Escribe 'idk' en la consola",
        icon: "ü§î",
        requirement: () => false, // Se maneja en la consola
        unlocked: false
    },
    cookieMonster: {
        name: "¬°Come Galletas!",
        description: "Haz 1000 clicks consecutivos sin comprar",
        icon: "üç™",
        requirement: () => clicksWithoutBuying >= 1000,
        unlocked: false
    },
    perfectBalance: {
        name: "¬°Equilibrio Perfecto!",
        description: "Haz 1000 clicks consecutivos con el mismo multiplicador",
        icon: "üåü",
        requirement: () => gameStats.totalClicks >= 1000 && gameStats.multiplier === 1,
        unlocked: false
    }
};

// Funci√≥n para el easter egg idk
function idk() {
    if (!achievements.konami.unlocked) {
        achievements.konami.unlocked = true;
        cookies *= 2; // Duplica las galletas como bonus
        showNotification('¬°Easter egg encontrado! Galletas duplicadas', 'achievement');
        updateAchievementsDisplay();
        updateDisplay();
        
        console.log(`
        ¬Ø\\_(„ÉÑ)_/¬Ø
        idk... pero tus galletas se duplicaron
        `);
        return "¬Ø\\_(„ÉÑ)_/¬Ø";
    }
    return "ya usaste este easter egg";
}

// Eliminar el manejador anterior del c√≥digo Konami
document.removeEventListener('keydown', (e) => {});

// Eliminar la sobrescritura anterior de console.log
if (console.defaultLog) {
    console.log = console.defaultLog;
}

// Sistema de mejoras para edificios
const buildingUpgrades = {
    // mejoras de cursores
    cursor: [
        {
            id: 1,
            name: "Primera Mejora",
            description: "¬øhas comprado primero esta verdad?",
            cost: 1000,
            multiplier: 2,
            requirement: 10,
            purchased: false
        },
        {
            id: 2,
            name: "¬øQuieres m√°s cursores?",
            description: "¬øPero si quieres m√°s cursores?",
            cost: 5000,
            multiplier: 3,
            requirement: 25,
            purchased: false
        },
        {
            id: 3,
            name: "Dios del Cursor",
            description: "No hago ninguna broma aqui, los cursores producen el cu√°druple",
            cost: 50000,
            multiplier: 4,
            requirement: 50,
            purchased: false
        }
    ],
    //mejoras de abuelitas o qsy che pq programo?
    grandma: [
        {
            id: 1,
            name: "Guantes de Cocina",
            description: "No me gusta cocinar, pero si me gusta comer galletas",
            cost: 5000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Recetas Secretas",
            description: "Uhm no plankton, no robar√°s la receta de las galletas de mi abuela",
            cost: 25000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Sabidur√≠a Ancestral",
            description: "Tu abuela ha le√≠do un libro, cosa que deberias hacer tambi√©n",
            cost: 100000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],
    //mejoras de granjas
    farm: [
        {
            id: 1,
            name: "Fertilizante M√°gico",
            description: "¬°Dime que es natural!",
            cost: 11000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Riego Autom√°tico",
            description: "¬°Ojo, el agua est√° cara!",
            cost: 55000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Invernaderos Avanzados",
            description: "Pagas a los que trabajan aqu√≠, ¬øno?",
            cost: 275000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],
    //mejoras de minas
    mine: [
        {
            id: 1,
            name: "Picos de Diamante",
            description: "¬øentendiste la referencia?",
            cost: 120000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Excavadoras Autom√°ticas",
            description: "Wow, no me lo imaginaba",
            cost: 600000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Tecnolog√≠a L√°ser",
            description: "¬°Oh no! darth vader nos ataca!",
            cost: 3000000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],
    //mejoras de f√°bricas
    factory: [
        {
            id: 1,
            name: "L√≠nea de Producci√≥n",
            description: "No lavar√°s dinero con la f√°brica, ¬øno?",
            cost: 1300000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Automatizaci√≥n Avanzada",
            description: "Woah, cuanta tecnolog√≠a",
            cost: 6500000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "IA Industrial",
            description: "ChatGPT, no te rebeles",
            cost: 32500000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],  
    //mejoras de bancos
    bank: [
        {
            id: 1,
            name: "Inversiones Seguras",
            description: "¬øqu√© tan seguro es esto?",
            cost: 14000000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Mercado de Valores",
            description: "Ojo que no pase lo del 29",
            cost: 70000000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Criptomonedas",
            description: "Hazme un favor y no compres criptomonedas",
            cost: 350000000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],
    //mejoras de templos
    temple: [
        {
            id: 1,
            name: "Ofrendas Sagradas",
            description: "No s√©, suspend√≠ religi√≥n",
            cost: 200000000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Rituales Ancestrales",
            description: "No mataremos ning√∫n beb√©, ¬øno?",
            cost: 1000000000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Bendici√≥n Divina",
            description: "Woah, dios me quiere",
            cost: 5000000000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],
    //mejoras de torres de magos
    wizard: [
        {
            id: 1,
            name: "Varitas Mejoradas",
            description: "Cuidado con Voldemort, o no se, nunca v√≠ harry potter",
            cost: 3300000000,
            multiplier: 2,
            requirement: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Grimorio Antiguo",
            description: "¬øqu√© es un grimorio?",
            cost: 16500000000,
            multiplier: 3,
            requirement: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Poder Arcano",
            description: "Si has llegado hasta aqu√≠, es imposible que tengas novia",
            cost: 82500000000,
            multiplier: 4,
            requirement: 30,
            purchased: false
        }
    ],
    // Mejoras de nave espacial
    shipment: [
        {
            id: 1,
            name: "Propulsores Mejorados",
            description: "¬°A velocidad luz!",
            cost: 51000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Combustible de Galletas",
            description: "Energ√≠a limpia y deliciosa",
            cost: 255000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Tecnolog√≠a Alien√≠gena",
            description: "Los extraterrestres aman las galletas",
            cost: 1275000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de laboratorio de alquimia
    alchemy: [
        {
            id: 1,
            name: "Elixir de Galletas",
            description: "¬°No lo bebas!",
            cost: 750000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Transmutaci√≥n Perfecta",
            description: "El secreto est√° en la masa",
            cost: 3750000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Piedra Filosofal",
            description: "Convierte el plomo en galletas",
            cost: 18750000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de portal
    portal: [
        {
            id: 1,
            name: "Estabilizador Dimensional",
            description: "Para que las galletas no se pierdan en el vac√≠o",
            cost: 10000000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "T√∫nel Espaciotemporal",
            description: "Conecta directamente con el est√≥mago",
            cost: 50000000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Realidad Alternativa",
            description: "Donde todo es galleta",
            cost: 250000000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de m√°quina del tiempo
    timeMachine: [
        {
            id: 1,
            name: "Flujo Temporal",
            description: "Las galletas del pasado saben mejor",
            cost: 140000000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Paradoja Controlada",
            description: "¬øY si comes una galleta antes de hornearla?",
            cost: 700000000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Bucle Temporal",
            description: "Galletas infinitas en tiempo finito",
            cost: 3500000000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de condensador antimaterial
    antimatter: [
        {
            id: 1,
            name: "Compresi√≥n Cu√°ntica",
            description: "Galletas en estado superpuesto",
            cost: 1700000000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Fluctuaci√≥n del Vac√≠o",
            description: "Galletas que aparecen de la nada",
            cost: 8500000000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Colapso del Universo",
            description: "¬°Ups!",
            cost: 42500000000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de prisma
    prism: [
        {
            id: 1,
            name: "Refracci√≥n Dulce",
            description: "Convierte la luz en az√∫car",
            cost: 21000000000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Fotos√≠ntesis de Galletas",
            description: "La ciencia ha ido demasiado lejos",
            cost: 105000000000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Espectro Completo",
            description: "Galletas de todos los colores",
            cost: 525000000000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de motor de galletas
    engine: [
        {
            id: 1,
            name: "Turbocompresor",
            description: "¬°M√°s potencia!",
            cost: 260000000000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Inyecci√≥n Directa",
            description: "Directo al paladar",
            cost: 1300000000000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Fusi√≥n en Fr√≠o",
            description: "Energ√≠a limpia y deliciosa",
            cost: 6500000000000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ],
    // Mejoras de fractal
    fractal: [
        {
            id: 1,
            name: "Autosimilitud",
            description: "Galletas dentro de galletas dentro de galletas...",
            cost: 3100000000000000000,
            multiplier: 2,
            requiredBuildings: 5,
            purchased: false
        },
        {
            id: 2,
            name: "Dimensi√≥n Fractal",
            description: "Matem√°ticas deliciosas",
            cost: 15500000000000000000,
            multiplier: 3,
            requiredBuildings: 15,
            purchased: false
        },
        {
            id: 3,
            name: "Conjunto de Mandelbrot",
            description: "El infinito nunca supo tan bien",
            cost: 77500000000000000000,
            multiplier: 4,
            requiredBuildings: 30,
            purchased: false
        }
    ]
};

// Elementos del DOM
const cookieElement = document.getElementById('cookie');
const cookieCountElement = document.getElementById('cookie-count');
const cpsElement = document.getElementById('cps');
const cpcElement = document.getElementById('cpc');
const multiplierElement = document.getElementById('multiplier');
const achievementsContainer = document.getElementById('achievements-container');

// Definici√≥n de edificios y sus emojis
const buildings = {
    cursor: { emoji: 'üëÜ', name: 'Cursor' },
    grandma: { emoji: 'üëµ', name: 'Abuelita' },
    farm: { emoji: 'üåæ', name: 'Granja' },
    mine: { emoji: '‚õèÔ∏è', name: 'Mina' },
    factory: { emoji: 'üè≠', name: 'F√°brica' },
    bank: { emoji: 'üè¶', name: 'Banco' },
    temple: { emoji: '‚õ™', name: 'Templo' },
    wizard: { emoji: 'üßô‚Äç‚ôÇÔ∏è', name: 'Torre de Magos' },
    shipment: { emoji: 'üöÄ', name: 'Nave Espacial' },
    alchemy: { emoji: '‚öóÔ∏è', name: 'Laboratorio de Alquimia' },
    portal: { emoji: 'üåÄ', name: 'Portal' },
    timeMachine: { emoji: '‚åõ', name: 'M√°quina del Tiempo' },
    antimatter: { emoji: '‚öõÔ∏è', name: 'Condensador Antimaterial' },
    prism: { emoji: 'üîÆ', name: 'Prisma' },
    engine: { emoji: '‚öôÔ∏è', name: 'Motor de Galletas' },
    fractal: { emoji: 'üåå', name: 'Fractal' }
};

// Funci√≥n para formatear n√∫meros grandes
function formatNumber(num) {
    if (num >= 1e12) {
        return (num / 1e12).toFixed(2) + 'T';
    } else if (num >= 1e9) {
        return (num / 1e9).toFixed(2) + 'B';
    } else if (num >= 1e6) {
        return (num / 1e6).toFixed(2) + 'M';
    } else if (num >= 1e3) {
        return (num / 1e3).toFixed(1) + 'K';
    }
    return Math.floor(num).toLocaleString();
}

// Funci√≥n para dibujar un edificio en el canvas
function drawBuildingInCanvas(type) {
    const canvas = document.getElementById(`${type}Canvas`);
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    const container = document.getElementById(`${type}-container`);
    
    // Limpiar el canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Si el contenedor est√° oculto o no hay edificios, no dibujamos
    if (container.classList.contains('hidden') || !upgrades[type].count) return;

    // Configuraci√≥n del texto
    ctx.font = '24px Arial';
    ctx.textBaseline = 'middle';
    ctx.textAlign = 'center';
    
    // Calcular el espacio disponible y el tama√±o de cada edificio
    const spacing = 32; // Espacio entre edificios
    const maxIcons = Math.min(upgrades[type].count, Math.floor((canvas.width - 40) / spacing));
    const startX = 20 + (canvas.width - 40 - (maxIcons * spacing)) / 2;
    
    // Dibujar los edificios con efecto de profundidad
    for (let i = 0; i < maxIcons; i++) {
        const x = startX + i * spacing;
        const y = canvas.height / 2;
        
        // Sombra
        ctx.shadowColor = 'rgba(0,0,0,0.5)';
        ctx.shadowBlur = 4;
        ctx.shadowOffsetX = 2;
        ctx.shadowOffsetY = 2;
        
        // Dibujar el edificio
        ctx.fillStyle = '#ffd700';
        ctx.fillText(buildings[type].emoji, x, y);
    }
    
    // Resetear sombra
    ctx.shadowColor = 'transparent';
    ctx.shadowBlur = 0;
    ctx.shadowOffsetX = 0;
    ctx.shadowOffsetY = 0;
    
    // Si hay m√°s edificios de los que caben, mostrar indicador
    if (upgrades[type].count > maxIcons) {
        ctx.fillStyle = '#ffd700';
        ctx.font = '16px Arial';
        ctx.textAlign = 'right';
        ctx.fillText(`+${upgrades[type].count - maxIcons}`, canvas.width - 10, canvas.height/2);
    }
}

// Actualizar la visualizaci√≥n de edificios
function updateBuildingDisplay(type) {
    const container = document.getElementById(`${type}-container`);
    if (!container) return;

    // Actualizar estad√≠sticas
    container.querySelector('.building-level').textContent = `Nivel ${upgrades[type].count}`;
    container.querySelector('.building-count').textContent = `${upgrades[type].count}`;
    container.querySelector('.building-production').textContent = 
        `${formatNumber(upgrades[type].cps * upgrades[type].count * multiplier)}/s`;
    
    // Dibujar en el canvas
    drawBuildingInCanvas(type);
}

// Funci√≥n para actualizar la visualizaci√≥n
function updateDisplay() {
    // Actualizar contadores principales
    document.getElementById('cookie-counter').textContent = `${formatNumber(cookies)} galletas`;
    document.getElementById('cps').textContent = formatNumber(cookiesPerSecond);
    
    // Actualizar costos y cantidades de mejoras
    for (const type in upgrades) {
        const totalCost = calculateTotalCost(upgrades[type].baseCost, buyMultiplier);
        const element = document.getElementById(type);
        const costElement = document.getElementById(`${type}-cost`);
        const countElement = document.getElementById(`${type}-count`);
        
        if (element && costElement && countElement) {
            costElement.textContent = formatNumber(totalCost);
            countElement.textContent = upgrades[type].count;
            
            // Actualizar estado bloqueado/desbloqueado
            if (cookies >= totalCost) {
                element.classList.remove('locked');
            } else {
                element.classList.add('locked');
            }
            
            // Mostrar edificio si alcanza el requisito de desbloqueo
            if (cookies >= upgrades[type].unlockAt) {
                element.classList.remove('hidden');
                document.getElementById(`${type}-container`).classList.remove('hidden');
            }
        }
    }
    
    // Actualizar mejoras de edificios
    updateUpgradesDisplay();
    
    // Actualizar informaci√≥n de prestigio
    const ascensionInfo = document.getElementById('ascension-info');
    if (ascensionInfo) {
        const chipsAvailable = calculateHeavenlyChips();
        ascensionInfo.innerHTML = `
            <div class="stats-row">
                <span>Chips Celestiales:</span>
                <span>${formatNumber(heavenlyChips)}</span>
            </div>
            <div class="stats-row">
                <span>Multiplicador Celestial:</span>
                <span>√ó${heavenlyMultiplier.toFixed(2)}</span>
            </div>
            ${chipsAvailable > 0 ? `
            <div class="stats-row">
                <span>Chips disponibles al ascender:</span>
                <span>${formatNumber(chipsAvailable)}</span>
            </div>
            ` : ''}
        `;
    }
}

// Funci√≥n para calcular el costo total basado en la cantidad
function calculateTotalCost(baseCost, amount) {
    return baseCost * amount;
}

// Funci√≥n para cambiar entre pesta√±as
function switchTab(tabName) {
    document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    
    document.getElementById(`${tabName}-tab`).classList.add('active');
    document.querySelector(`[onclick="switchTab('${tabName}')"]`).classList.add('active');

    // Deshabilitar/habilitar botones seg√∫n la pesta√±a
    const isBuildings = tabName === 'buildings';
    document.querySelectorAll('.buy-button').forEach(btn => {
        const isUpgradeButton = btn.getAttribute('onclick').includes('buyBuildingUpgrade');
        if (isBuildings) {
            // En pesta√±a edificios, solo permitir comprar edificios
            btn.disabled = isUpgradeButton;
            btn.style.opacity = isUpgradeButton ? '0.5' : '1';
        } else {
            // En pesta√±a mejoras, solo permitir comprar mejoras
            btn.disabled = !isUpgradeButton;
            btn.style.opacity = !isUpgradeButton ? '0.5' : '1';
        }
    });
}

// Funci√≥n para comprar mejoras
function buyUpgrade(type) {
    // Verificar si estamos en la pesta√±a correcta
    if (!document.getElementById('buildings-tab').classList.contains('active')) {
        showNotification('¬°Debes estar en la pesta√±a de Edificios para comprar edificios!', 'error');
        return;
    }

    const upgrade = upgrades[type];
    const totalCost = calculateTotalCost(upgrade.baseCost, buyMultiplier);
    
    if (cookies >= totalCost) {
        cookies -= totalCost;
        upgrade.count += buyMultiplier;
        clicksWithoutBuying = 0; // Resetear el contador cuando se compra algo
        
        // Resto de la l√≥gica existente...
        const oldCps = upgrade.cps * upgrade.count;
        cookiesPerSecond = cookiesPerSecond - oldCps + (upgrade.cps * upgrade.count);
        
        updateDisplay();
        updateBuildingDisplay(type);
        checkAchievements();
        saveGame();
    } else {
        showNotification('¬°No tienes suficientes galletas!', 'error');
    }
}

// Funci√≥n para comprar mejoras de edificios
function buyBuildingUpgrade(buildingType, upgradeId) {
    // Verificar si estamos en la pesta√±a correcta
    if (!document.getElementById('upgrades-tab').classList.contains('active')) {
        showNotification('¬°Debes estar en la pesta√±a de Mejoras para comprar mejoras!', 'error');
        return;
    }

    const building = upgrades[buildingType];
    const upgrade = buildingUpgrades[buildingType].find(u => u.id === upgradeId);
    
    if (!upgrade || upgrade.purchased || building.count < upgrade.requirement || cookies < upgrade.cost) {
        if (cookies < upgrade.cost) {
            showNotification('¬°No tienes suficientes galletas!', 'error');
        } else if (building.count < upgrade.requirement) {
            showNotification(`¬°Necesitas ${upgrade.requirement} ${buildings[buildingType].name}s!`, 'error');
        }
        return;
    }
    
    cookies -= upgrade.cost;
    upgrade.purchased = true;
    
    // Actualizar la producci√≥n del edificio
    const oldCps = building.cps;
    building.cps *= upgrade.multiplier;
    cookiesPerSecond += (building.cps - oldCps) * building.count;
    
    // Actualizar visualizaci√≥n
    updateDisplay();
    updateUpgradesDisplay();
    saveGame();
    
    showNotification('¬°Mejora comprada con √©xito!', 'success');
}

// Funci√≥n para actualizar el ticker de noticias con animaci√≥n
function updateNewsTickerWithAnimation() {
    const ticker = document.getElementById('news-ticker');
    const currentText = ticker.querySelector('span');
    
    // Crear y preparar el nuevo texto
    const newText = document.createElement('span');
    newText.textContent = newsMessages[Math.floor(Math.random() * newsMessages.length)];
    newText.style.opacity = '0';
    newText.style.transform = 'translateY(20px)';
    newText.style.transition = 'all 0.5s ease';
    
    // Animar la salida del texto actual
    currentText.style.opacity = '0';
    currentText.style.transform = 'translateY(-20px)';
    
    // Despu√©s de la animaci√≥n de salida, cambiar el texto
    setTimeout(() => {
        ticker.removeChild(currentText);
        ticker.appendChild(newText);
        
        // Forzar un reflow
        newText.offsetHeight;
        
        // Animar la entrada del nuevo texto
        newText.style.opacity = '1';
        newText.style.transform = 'translateY(0)';
    }, 500);
}

// Funci√≥n para manejar clicks en la galleta
function handleCookieClick() {
    // L√≥gica existente
    cookies += cookiesPerClick * multiplier * heavenlyMultiplier;
    gameStats.totalCookies += cookiesPerClick * multiplier * heavenlyMultiplier;
    gameStats.totalClicks++;
    clicksWithoutBuying++;
    
    // L√≥gica para el logro speedClicker
    const currentTime = Date.now();
    if (currentTime - lastClickTime <= 3000) {
        clickCounter++;
        if (clickCounter >= 15 && !achievements.speedClicker.unlocked) {
            achievements.speedClicker.unlocked = true;
            showNotification('¬°Logro desbloqueado: Dedo Veloz!', 'achievement');
            updateAchievementsDisplay();
        }
    } else {
        clickCounter = 1;
    }
    lastClickTime = currentTime;
    
    // L√≥gica para el logro cookieMonster
    if (clicksWithoutBuying >= 100 && !achievements.cookieMonster.unlocked) {
        achievements.cookieMonster.unlocked = true;
        showNotification('¬°Logro desbloqueado: Come Galletas!', 'achievement');
        updateAchievementsDisplay();
    }
    
    updateDisplay();
    createFloatingNumber('+' + formatNumber(cookiesPerClick * multiplier * heavenlyMultiplier));
    playClickSound();
    spawnClickParticles();
}

// Manejador del c√≥digo Konami
document.addEventListener('keydown', (e) => {
    const konamiSequence = 'ArrowUpArrowUpArrowDownArrowDownArrowLeftArrowRightArrowLeftArrowRightba';
    konamiCode += e.key;
    
    if (konamiCode.length > konamiSequence.length) {
        konamiCode = konamiCode.substring(1);
    }
    
    if (konamiCode === konamiSequence && !achievements.konami.unlocked) {
        achievements.konami.unlocked = true;
        cookies *= 2; // Duplica las galletas como bonus
        showNotification('¬°C√≥digo Konami activado! Galletas duplicadas', 'achievement');
        updateAchievementsDisplay();
        updateDisplay();
        
        // Easter egg: escribir "idk" en la consola
        console.log("idk");
        
        // Mensaje secreto en ASCII art
        console.log(`
        ¬Ø\\_(„ÉÑ)_/¬Ø
        idk... pero tus galletas se duplicaron
        `);
    }
});

// Funci√≥n para manejar clicks en galletas doradas
function handleGoldenCookieClick() {
    gameStats.goldenCookieClicks++;
    
    if (gameStats.goldenCookieClicks >= 50 && !achievements.goldenFinger.unlocked) {
        achievements.goldenFinger.unlocked = true;
        showNotification('¬°Logro desbloqueado: Dedo de Oro!', 'achievement');
        updateAchievementsDisplay();
    }
}

// Funci√≥n para verificar y actualizar logros
function checkAchievements() {
    let newAchievements = false;
    
    for (const [id, achievement] of Object.entries(achievements)) {
        if (!achievement.unlocked && achievement.requirement()) {
            achievement.unlocked = true;
            newAchievements = true;
            showNotification(`¬°Logro desbloqueado: ${achievement.name}!`, 'achievement');
        }
    }
    
    if (newAchievements) {
        updateAchievementsDisplay();
        saveGame();
    }
}

// Funci√≥n para actualizar la visualizaci√≥n de logros
function updateAchievementsDisplay() {
    const achievementsContainer = document.getElementById('achievements-container');
    if (!achievementsContainer) return;
    
    achievementsContainer.innerHTML = '';
    
    // Lista de logros secretos
    const secretAchievements = ['nightOwl', 'konami', 'cookieMonster', 'perfectBalance'];
    
    for (const [id, achievement] of Object.entries(achievements)) {
        const div = document.createElement('div');
        const isSecret = secretAchievements.includes(id);
        
        div.className = `achievement ${achievement.unlocked ? 'unlocked' : ''} ${isSecret ? 'secret' : ''}`;
        
        div.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-description">
                    ${isSecret && !achievement.unlocked ? '???' : achievement.description}
                </div>
            </div>
        `;
        
        // A√±adir tooltip para logros bloqueados
        if (!achievement.unlocked) {
            div.title = isSecret ? '¬°Logro secreto!' : '¬°Logro bloqueado!';
        }
        
        achievementsContainer.appendChild(div);
    }
    
    // Actualizar contador de logros
    const unlockedCount = Object.values(achievements).filter(a => a.unlocked).length;
    const totalCount = Object.keys(achievements).length;
    const achievementsCounter = document.getElementById('achievements-unlocked-stat');
    if (achievementsCounter) {
        achievementsCounter.textContent = `${unlockedCount}/${totalCount}`;
    }
}

// Producci√≥n autom√°tica de galletas
setInterval(() => {
    const production = cookiesPerSecond;
    cookies += production;
    gameStats.totalCookies += production;
    updateDisplay();
}, 1000);

// Funci√≥n para mostrar notificaci√≥n de guardado
function showSaveNotification(message = "¬°Juego guardado!") {
    const notification = document.createElement('div');
    notification.className = 'save-notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Eliminar la notificaci√≥n despu√©s de la animaci√≥n
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// Funci√≥n para editar el nombre de la confiter√≠a
function toggleNameEdit() {
    const nameElement = document.getElementById('bakery-name');
    const currentName = nameElement.textContent;
    
    if (!nameElement.classList.contains('editing')) {
        // Entrar en modo edici√≥n
        nameElement.classList.add('editing');
        nameElement.contentEditable = true;
        nameElement.focus();
        
        // Seleccionar todo el texto
        const range = document.createRange();
        range.selectNodeContents(nameElement);
        const selection = window.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
        
        // Cambiar el bot√≥n a "guardar"
        document.getElementById('edit-name').textContent = 'üíæ';
    } else {
        // Guardar cambios
        nameElement.classList.remove('editing');
        nameElement.contentEditable = false;
        bakeryName = nameElement.textContent;
        
        // Restaurar el bot√≥n de edici√≥n
        document.getElementById('edit-name').textContent = '‚úèÔ∏è';
        
        // Guardar en localStorage
        saveGame();
    }
}

// Evento para manejar la tecla Enter
document.getElementById('bakery-name').addEventListener('keydown', function(e) {
    if (e.key === 'Enter') {
        e.preventDefault();
        toggleNameEdit();
    }
});

// Funci√≥n para actualizar la visualizaci√≥n de las mejoras
function updateUpgradesDisplay() {
    for (const [buildingType, upgrades] of Object.entries(buildingUpgrades)) {
        const container = document.getElementById(`${buildingType}-upgrades`);
        if (!container) continue;
        
        upgrades.forEach(upgrade => {
            const element = document.getElementById(`${buildingType}-upgrade-${upgrade.id}`);
            if (!element) return;
            
            const building = upgrades[buildingType];
            const isUnlocked = building && building.count >= upgrade.requirement;
            
            if (upgrade.purchased) {
                element.classList.add('purchased');
                element.classList.remove('locked');
            } else if (isUnlocked) {
                element.classList.remove('locked');
            } else {
                element.classList.add('locked');
            }
        });
    }
}

// Funci√≥n para guardar el juego
function saveGame() {
    const gameData = {
        cookies: cookies,
        cookiesPerSecond: cookiesPerSecond,
        cookiesPerClick: cookiesPerClick,
        multiplier: multiplier,
        bakeryName: bakeryName,
        buyMultiplier: buyMultiplier,
        upgrades: upgrades,
        buildingUpgrades: buildingUpgrades,
        achievements: achievements,
        gameStats: {
            ...gameStats,
            goldenCookieClicks: gameStats.goldenCookieClicks
        },
        heavenlyChips: heavenlyChips,
        heavenlyMultiplier: heavenlyMultiplier,
        settings: {
            theme: document.body.className || 'default',
            shortNumbers: document.getElementById('short-numbers').checked,
            sound: document.getElementById('sound-enabled').checked,
            particles: document.getElementById('particles-enabled').checked
        }
    };
    
    localStorage.setItem('cookieClickerSave', JSON.stringify(gameData));
    showSaveNotification();
}

function exportSave() {
    const gameData = localStorage.getItem('cookieClickerSave');
    if (gameData) {
        const blob = new Blob([gameData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'cookie_clicker_save.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        showNotification('Guardado exportado correctamente', 'success');
    }
}

function importSave() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = function(e) {
        const file = e.target.files[0];
        const reader = new FileReader();
        
        reader.onload = function(e) {
            try {
                const gameData = JSON.parse(e.target.result);
                localStorage.setItem('cookieClickerSave', JSON.stringify(gameData));
                loadGame();
                showNotification('¬°Guardado importado correctamente!', 'success');
            } catch (error) {
                showNotification('Error al importar el guardado', 'error');
            }
        };
        
        reader.readAsText(file);
    };
    
    input.click();
}

function wipeSave() {
    if (confirm('¬øEst√°s seguro de que quieres borrar todo tu progreso? Esta acci√≥n no se puede deshacer.')) {
        localStorage.removeItem('cookieClickerSave');
        location.reload();
    }
}

// Funciones de configuraci√≥n
function updateTheme(theme) {
    document.body.className = theme;
    localStorage.setItem('theme', theme);
}

function toggleShortNumbers() {
    const useShortNumbers = document.getElementById('short-numbers').checked;
    localStorage.setItem('shortNumbers', useShortNumbers);
    updateDisplay();
}

function toggleSound() {
    const soundEnabled = document.getElementById('sound-enabled').checked;
    localStorage.setItem('soundEnabled', soundEnabled);
}

function toggleParticles() {
    const particlesEnabled = document.getElementById('particles-enabled').checked;
    localStorage.setItem('particlesEnabled', particlesEnabled);
}

// Funci√≥n para mostrar notificaciones
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 500);
    }, 2000);
}

// Funci√≥n para mostrar el men√∫ de informaci√≥n
function showInfoMenu() {
    const menu = document.getElementById('info-menu');
    const overlay = document.createElement('div');
    overlay.className = 'menu-overlay';
    document.body.appendChild(overlay);
    menu.classList.remove('hidden');
    
    // Actualizar contenido del men√∫ de informaci√≥n
    const menuContent = menu.querySelector('.menu-content');
    menuContent.innerHTML = `
        <div class="info-section">
            <h3>Versi√≥n</h3>
            <p>Cookie Clicker v${VERSION}</p>
        </div>
        <div class="info-section">
            <h3>Registro de Cambios</h3>
            ${Object.entries(CHANGELOG).map(([version, changes]) => `
                <div class="version-block">
                    <h4>v${version}</h4>
                    <ul>
                        ${changes.map(change => `<li>${change}</li>`).join('')}
                    </ul>
                </div>
            `).join('')}
        </div>
        <div class="info-section">
            <h3>Cr√©ditos</h3>
            <p>Este es un clon educativo de Cookie Clicker.</p>
            <p>El juego original fue creado por Orteil.</p>
            <p>Esta versi√≥n fue creada con fines de aprendizaje.</p>
        </div>
    `;
    
    // Cerrar al hacer clic en el overlay
    overlay.addEventListener('click', hideInfoMenu);
}

// Funci√≥n para ocultar el men√∫ de informaci√≥n
function hideInfoMenu() {
    const menu = document.getElementById('info-menu');
    const overlay = document.querySelector('.menu-overlay');
    menu.classList.add('hidden');
    if (overlay) {
        overlay.remove();
    }
}

// Event listeners para el men√∫ de opciones
document.addEventListener('DOMContentLoaded', function() {
    // Botones de navegaci√≥n
    document.getElementById('options-btn').addEventListener('click', showOptionsMenu);
    document.getElementById('stats-btn').addEventListener('click', showStatsMenu);
    document.getElementById('info-btn').addEventListener('click', showInfoMenu);
    document.querySelectorAll('.close-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            hideOptionsMenu();
            hideStatsMenu();
            hideInfoMenu();
        });
    });
    
    // Event listeners para la edici√≥n del nombre
    const editNameBtn = document.getElementById('edit-name-btn');
    const saveNameBtn = document.getElementById('save-name-btn');
    const cancelNameBtn = document.getElementById('cancel-name-btn');
    const nameInput = document.getElementById('name-input');
    
    if (editNameBtn) editNameBtn.addEventListener('click', showNameEditor);
    if (saveNameBtn) saveNameBtn.addEventListener('click', saveBakeryName);
    if (cancelNameBtn) cancelNameBtn.addEventListener('click', hideNameEditor);
    
    // Permitir guardar con Enter en el input
    if (nameInput) {
        nameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                saveBakeryName();
            }
        });
    }
    
    // Botones de guardado
    document.getElementById('save-btn').addEventListener('click', () => {
        saveGame();
        hideOptionsMenu();
    });
    document.getElementById('export-btn').addEventListener('click', exportSave);
    document.getElementById('import-btn').addEventListener('click', importSave);
    document.getElementById('wipe-btn').addEventListener('click', wipeSave);
    
    // Configuraci√≥n
    document.getElementById('theme-select').addEventListener('change', (e) => updateTheme(e.target.value));
    document.getElementById('short-numbers').addEventListener('change', toggleShortNumbers);
    document.getElementById('sound-enabled').addEventListener('change', toggleSound);
    document.getElementById('particles-enabled').addEventListener('change', toggleParticles);
    
    // Cargar juego al inicio
    loadGame();
    
    // Autoguardado cada 5 minutos
    setInterval(saveGame, 30000);
});

// Funci√≥n para cargar el juego
function loadGame() {
    const savedGame = localStorage.getItem('cookieClickerSave');
    if (savedGame) {
        try {
            const gameData = JSON.parse(savedGame);
            
            // Cargar variables b√°sicas
            cookies = gameData.cookies || 0;
            cookiesPerSecond = gameData.cookiesPerSecond || 0;
            cookiesPerClick = gameData.cookiesPerClick || 1;
            multiplier = gameData.multiplier || 1;
            bakeryName = gameData.bakeryName || "La confiter√≠a de aleko";
            buyMultiplier = gameData.buyMultiplier || 1;
            
            // Actualizar el nombre en la interfaz
            const playerNameElement = document.getElementById('player-name');
            if (playerNameElement) {
                playerNameElement.textContent = 'aleko';
            }
            
            // Cargar estad√≠sticas
            if (gameData.gameStats) {
                gameStats = gameData.gameStats;
            } else {
                gameStats = {
                    totalCookies: cookies,
                    totalClicks: 0,
                    startDate: new Date().toISOString(),
                    playTime: 0
                };
            }
            
            // Cargar mejoras
            if (gameData.upgrades) {
                for (const type in gameData.upgrades) {
                    if (upgrades[type]) {
                        upgrades[type] = gameData.upgrades[type];
                    }
                }
            }
            
            // Cargar mejoras de edificios
            if (gameData.buildingUpgrades) {
                for (const type in gameData.buildingUpgrades) {
                    if (buildingUpgrades[type]) {
                        buildingUpgrades[type] = gameData.buildingUpgrades[type];
                    }
                }
            }
            
            // Cargar logros
            if (gameData.achievements) {
                for (const id in gameData.achievements) {
                    if (achievements[id]) {
                        achievements[id].unlocked = gameData.achievements[id].unlocked;
                    }
                }
            }
            
            // Cargar configuraci√≥n
            if (gameData.settings) {
                const { theme, shortNumbers, sound, particles } = gameData.settings;
                if (theme) updateTheme(theme);
                if (shortNumbers !== undefined) document.getElementById('short-numbers').checked = shortNumbers;
                if (sound !== undefined) document.getElementById('sound-enabled').checked = sound;
                if (particles !== undefined) document.getElementById('particles-enabled').checked = particles;
            }
            
            // Actualizar nombre de la confiter√≠a
            document.getElementById('bakery-name').textContent = bakeryName;
            
            // Actualizar CPS y visualizaci√≥n
            updateCPS();
            updateDisplay();
            updateAchievementsDisplay();
            
            // Actualizar filas de edificios
            for (const type in upgrades) {
                updateBuildingDisplay(type);
            }
            
            // Cargar datos de prestigio
            heavenlyChips = gameData.heavenlyChips || 0;
            heavenlyMultiplier = gameData.heavenlyMultiplier || 1;
            
            if (gameData.gameStats) {
                gameStats.ascensions = gameData.gameStats.ascensions || 0;
                gameStats.totalHeavenlyChips = gameData.gameStats.totalHeavenlyChips || 0;
            }
            
            showNotification('¬°Juego cargado correctamente!', 'success');
        } catch (error) {
            showNotification('Error al cargar el juego', 'error');
            console.error('Error al cargar:', error);
        }
    }
}

// Inicializaci√≥n
window.onload = function() {
    loadGame();
    // Actualizar noticias cada 10 segundos
    setInterval(updateNewsTickerWithAnimation, 10000);
    setInterval(() => {
        cookies += cookiesPerSecond;
        updateDisplay();
    }, 1000);
    setInterval(saveGame, 30000);
};

// Funci√≥n para cambiar la cantidad de compra
function buyAmount(amount) {
    buyMultiplier = amount;
    // Actualizar botones
    document.querySelectorAll('.buy-amount').forEach(btn => {
        btn.classList.remove('active');
        if (btn.textContent.includes(amount.toString())) {
            btn.classList.add('active');
        }
    });
    // Actualizar precios mostrados
    updateDisplayedPrices();
}

// Funci√≥n para actualizar los precios mostrados
function updateDisplayedPrices() {
    for (const type in upgrades) {
        const baseCost = upgrades[type].baseCost;
        const totalCost = calculateTotalCost(baseCost, buyMultiplier);
        document.getElementById(`${type}-cost`).textContent = formatNumber(totalCost);
    }
}

// Funci√≥n para calcular el costo total basado en la cantidad
function calculateTotalCost(baseCost, amount) {
    return baseCost * amount;
}

// Funci√≥n para actualizar CPS
function updateCPS() {
    cookiesPerSecond = 0;
    for (const type in upgrades) {
        const building = upgrades[type];
        let buildingCps = building.cps;
        
        // Aplicar multiplicadores de mejoras
        if (buildingUpgrades[type]) {
            buildingUpgrades[type].forEach(upgrade => {
                if (upgrade.purchased) {
                    buildingCps *= upgrade.multiplier;
                }
            });
        }
        
        // Aplicar multiplicador celestial
        buildingCps *= heavenlyMultiplier;
        
        cookiesPerSecond += buildingCps * building.count;
    }
}

// Funciones del men√∫ de opciones
function showOptionsMenu() {
    const menu = document.getElementById('options-menu');
    const overlay = document.createElement('div');
    overlay.className = 'menu-overlay';
    document.body.appendChild(overlay);
    menu.classList.remove('hidden');
    
    // Cerrar al hacer clic en el overlay
    overlay.addEventListener('click', hideOptionsMenu);
}

function hideOptionsMenu() {
    const menu = document.getElementById('options-menu');
    const overlay = document.querySelector('.menu-overlay');
    menu.classList.add('hidden');
    if (overlay) {
        overlay.remove();
    }
}

// Funci√≥n para formatear tiempo
function formatTime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

// Funci√≥n para formatear fecha
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();
}

// Funci√≥n para mostrar el men√∫ de estad√≠sticas
function showStatsMenu() {
    const menu = document.getElementById('stats-menu');
    const overlay = document.createElement('div');
    overlay.className = 'menu-overlay';
    document.body.appendChild(overlay);
    menu.classList.remove('hidden');
    
    updateStatsDisplay();
    
    // Cerrar al hacer clic en el overlay
    overlay.addEventListener('click', hideStatsMenu);
}

// Funci√≥n para ocultar el men√∫ de estad√≠sticas
function hideStatsMenu() {
    const menu = document.getElementById('stats-menu');
    const overlay = document.querySelector('.menu-overlay');
    menu.classList.add('hidden');
    if (overlay) {
        overlay.remove();
    }
}

// Funci√≥n para actualizar la visualizaci√≥n de estad√≠sticas
function updateStatsDisplay() {
    // Actualizar estad√≠sticas generales
    document.getElementById('total-cookies-stat').textContent = formatNumber(gameStats.totalCookies);
    document.getElementById('time-played-stat').textContent = formatTime(gameStats.playTime);
    document.getElementById('start-date-stat').textContent = formatDate(gameStats.startDate);
    document.getElementById('total-clicks-stat').textContent = formatNumber(gameStats.totalClicks);
    document.getElementById('cookies-per-click-stat').textContent = formatNumber(cookiesPerClick);
    document.getElementById('cookies-per-second-stat').textContent = formatNumber(cookiesPerSecond);
    
    // Actualizar estad√≠sticas de edificios
    const buildingsStats = document.getElementById('buildings-stats');
    buildingsStats.innerHTML = '';
    
    for (const [type, building] of Object.entries(buildings)) {
        const buildingStat = document.createElement('div');
        buildingStat.className = 'building-stat';
        
        const production = upgrades[type].cps * upgrades[type].count * multiplier;
        const totalProduction = (gameStats.totalCookies * (production / cookiesPerSecond)) || 0;
        
        buildingStat.innerHTML = `
            <div class="building-icon">${building.emoji}</div>
            <div class="building-info">
                <div class="building-name">${building.name}</div>
                <div class="building-details">
                    Producci√≥n: ${formatNumber(production)}/s
                    <br>
                    Total producido: ${formatNumber(totalProduction)}
                </div>
            </div>
            <div class="building-count">${upgrades[type].count}</div>
        `;
        
        buildingsStats.appendChild(buildingStat);
    }
    
    // Actualizar estad√≠sticas de logros
    const achievementsList = document.getElementById('achievements-list');
    achievementsList.innerHTML = '';
    
    const unlockedCount = Object.values(achievements).filter(a => a.unlocked).length;
    const totalCount = Object.keys(achievements).length;
    document.getElementById('achievements-unlocked-stat').textContent = `${unlockedCount}/${totalCount}`;
    
    for (const achievement of Object.values(achievements)) {
        const achievementStat = document.createElement('div');
        achievementStat.className = `achievement-stat ${achievement.unlocked ? 'unlocked' : ''}`;
        
        achievementStat.innerHTML = `
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-name">${achievement.name}</div>
                <div class="achievement-desc">${achievement.description}</div>
            </div>
        `;
        
        achievementsList.appendChild(achievementStat);
    }
}

// Actualizar tiempo de juego cada segundo
setInterval(() => {
    gameStats.playTime++;
    if (document.getElementById('stats-menu') && !document.getElementById('stats-menu').classList.contains('hidden')) {
        updateStatsDisplay();
    }
}, 1000); 

// Funci√≥n para calcular chips celestiales disponibles
function calculateHeavenlyChips() {
    return Math.floor(Math.pow(cookies / 1e12, 0.5));
}

// Funci√≥n para verificar si se puede ascender
function canAscend() {
    return calculateHeavenlyChips() > 0;
}

// Funci√≥n para realizar la ascensi√≥n
function ascend() {
    if (!canAscend()) {
        showNotification('Necesitas al menos 1 bill√≥n de galletas para ascender', 'error');
        return;
    }

    const newChips = calculateHeavenlyChips();
    const confirmMessage = `¬øEst√°s seguro de que quieres ascender?\n\nObtendr√°s ${formatNumber(newChips)} chips celestiales.\nCada chip aumentar√° tu producci√≥n de galletas en un 2% permanentemente.\n\nPERDER√ÅS:\n- Todas tus galletas\n- Todos tus edificios\n- Todas las mejoras de edificios\n\nMANTENDR√ÅS:\n- Tus logros\n- Tus chips celestiales anteriores`;

    if (confirm(confirmMessage)) {
        // Guardar chips celestiales
        heavenlyChips += newChips;
        gameStats.totalHeavenlyChips += newChips;
        gameStats.ascensions++;
        
        // Actualizar multiplicador celestial
        heavenlyMultiplier = 1 + (heavenlyChips * 0.02);

        // Reiniciar el juego
        cookies = 0;
        cookiesPerSecond = 0;
        cookiesPerClick = 1;
        multiplier = 1;
        
        // Reiniciar edificios y mejoras
        for (const type in upgrades) {
            upgrades[type].count = 0;
        }
        
        for (const type in buildingUpgrades) {
            buildingUpgrades[type].forEach(upgrade => {
                upgrade.purchased = false;
            });
        }

        // Actualizar visualizaci√≥n
        updateDisplay();
        updateAchievementsDisplay();
        saveGame();
        
        showNotification(`¬°Has ascendido! Obtuviste ${formatNumber(newChips)} chips celestiales`, 'success');
    }
}

// Funci√≥n para mostrar el men√∫ de legado
function showLegacyMenu() {
    document.getElementById('legacy-menu').classList.remove('hidden');
    updateLegacyMenu();
}

// Funci√≥n para ocultar el men√∫ de legado
function hideLegacyMenu() {
    document.getElementById('legacy-menu').classList.add('hidden');
}

// Funci√≥n para actualizar la informaci√≥n del men√∫ de legado
function updateLegacyMenu() {
    const currentChips = heavenlyChips;
    const currentMultiplier = heavenlyMultiplier;
    const newChips = calculateHeavenlyChips();
    const newMultiplier = 1 + ((currentChips + newChips) * 0.02); // 2% por chip

    document.getElementById('current-chips').textContent = formatNumber(currentChips);
    document.getElementById('current-multiplier').textContent = `+${formatNumber((currentMultiplier - 1) * 100)}%`;
    document.getElementById('prestige-chips').textContent = formatNumber(newChips);
    document.getElementById('new-multiplier').textContent = `+${formatNumber((newMultiplier - 1) * 100)}%`;
    
    document.getElementById('total-ascensions').textContent = formatNumber(gameStats.ascensions);
    document.getElementById('total-heavenly-chips').textContent = formatNumber(gameStats.totalHeavenlyChips);

    const ascendButton = document.getElementById('ascend-button');
    if (canAscend()) {
        ascendButton.disabled = false;
        ascendButton.querySelector('.tooltip').textContent = 
            `Ascender para ganar ${formatNumber(newChips)} chips celestiales`;
    } else {
        ascendButton.disabled = true;
        ascendButton.querySelector('.tooltip').textContent = 
            'Necesitas al menos 1 bill√≥n de galletas para ascender';
    }
}

// A√±adir event listeners para el bot√≥n de legado
document.getElementById('legacy-btn').addEventListener('click', showLegacyMenu);
document.querySelector('#legacy-menu .close-btn').addEventListener('click', hideLegacyMenu);

// Actualizar la funci√≥n updateDisplay para incluir la actualizaci√≥n del men√∫ de legado
const originalUpdateDisplay = updateDisplay;
updateDisplay = function() {
    originalUpdateDisplay();
    if (!document.getElementById('legacy-menu').classList.contains('hidden')) {
        updateLegacyMenu();
    }
};

